#!/bin/bash

# Ben Bass 2012-2021 @codedstructure

if [[ -e /Applications/FreeMind.app ]] ; then
    FREEMIND=/Applications/FreeMind.app/Contents/MacOS/JavaApplicationStub
else
    FREEMIND=freemind
fi

if [[ -e /Applications/Dia.app ]] ; then
    # By default dia on Mac doesn't take command line args.
    # Follow the instructions here to fix this:
    # http://apple.stackexchange.com/a/56797
    DIA=/Applications/Dia.app/Contents/Resources/bin/dia-cmd
else
    DIA=dia
fi

if [[ -e /Applications/LibreOffice.app ]] ; then
    SOFFICE=/Applications/LibreOffice.app/Contents/MacOS/soffice
else
    SOFFICE=soffice
fi

if [[ -e /Applications/Inkscape.app ]] ; then
    # running inkscape with command line args on Mac requires
    # (cd /Applications/Inkscape.app; Contents/Resources/bin/inkscape $*)
    INKSCAPE="Contents/Resources/bin/inkscape"
    # TODO: this is flawed - setting this before we know Inkscape will be used
    INKSCAPE_START_DIR="/Applications/Inkscape.app"
else
    INKSCAPE=inkscape
fi

# Support for generic document opening
if $(which xdg-open &> /dev/null) ; then
    OPEN_CMD="xdg-open"
else
    OPEN_CMD="open"
fi

# Default directories, config setup

if [[ -d ~/Dropbox ]] ; then
    EDITFILE_DIR_DEFAULT=~/Dropbox/editfile
else
    EDITFILE_DIR_DEFAULT=~/Documents/editfile
fi

CONFIG_DIR=${XDG_CONFIG_HOME:-${HOME}/.config/editfile}
mkdir -p ${CONFIG_DIR}
EDITFILE_CONF=${CONFIG_DIR}/editfile.conf
if ! [[ -s $EDITFILE_CONF ]] ; then
    cat << EOF > ${EDITFILE_CONF}
# editfile.conf - config for editfile.

EDITFILE_DIR="$EDITFILE_DIR_DEFAULT"
EDITFILE_TEMPLATE_DIR="\${EDITFILE_DIR}/_template"
EDITFILE_TRASH_DIR="\${EDITFILE_DIR}/_trash"

# The default editor to use for editing text-based formats (txt, md, etc)
EDITFILE_TEXT_EDITOR=vim
EOF
fi

source $EDITFILE_CONF
EDITFILE_DIR=${EDITFILE_DIR:-$EDITFILE_DIR_DEFAULT}
TEMPLATE_DIR=${EDITFILE_TEMPLATE_DIR:-${EDITFILE_DIR}/_template}
TRASH_DIR=${EDITFILE_TRASH_DIR:-${EDITFILE_DIR}/_trash}

mkdir -p $EDITFILE_DIR  # ensure this exists
LOGFILE=${EDITFILE_DIR}/editfile.log

# Now we know where we are.
MAJOR_NAME=$(basename "$0")

direct_usage () {
    echo
    echo "this script is normally run from a symlink to it"
    echo
    echo "options when run directly:"
    echo " -l - list editfile command names"
    echo " -n <name> - make new editfile command name"
    echo " -d <name> - delete existing editfile command name"
    echo " -s <pattern> - search for given pattern in editfile files"
    echo
}

usage_die () {
    echo $1 >&2
    direct_usage >&2
    exit 2
}

if [[ $MAJOR_NAME = "editfile" ]] ; then
    EDITFILE_PATH=$(which editfile)
    case $1 in
        '-l')
            for p in $(echo $PATH | tr : \\n | sort | uniq); do
                find -L $p -maxdepth 1 -perm -100 -samefile $EDITFILE_PATH 2> /dev/null |\
                    while read COMMAND; do
                        CMD_NAME=$(basename $COMMAND)
                        [[ $CMD_NAME != "editfile" ]] && echo $CMD_NAME
                    done
            done
            exit 0
            ;;
        '-n')
            if [[ -z $2 ]] ; then
                usage_die "editfile -n requires command name argument."
            fi
            # This could override an alias. Perhaps use compgen -c,
            # but that seems dodgy too (and is likely slow).
            NEW_TARGET="$(dirname $EDITFILE_PATH)/$2"
            if which $2 > /dev/null ; then
                usage_die "Not overriding existing command $(which $2)"
            fi
            if test -e $NEW_TARGET ; then
                usage_die "Not replacing existing file $NEW_TARGET"
            fi
            ln -s $EDITFILE_PATH $NEW_TARGET
            echo "Created new editfile command '$2'"
            exit 0
            ;;
        '-d')
            if [[ -z $2 ]] ; then
                usage_die "editfile -d requires command name argument."
            fi
            # ensure this is a symlink to editfile
            TARGET=$(which $2)
            if ! [[ -L $TARGET && $(readlink $TARGET) == $EDITFILE_PATH ]]; then
                usage_die "$2 is not an editfile command"
            fi
            rm -i $TARGET
            exit 0
            ;;
        '-s')
            if [[ -z $2 ]] ; then
                usage_die "editfile -s requires a search pattern"
            fi
            # the pattern can be multiple things long...
            shift
            PATTERN="$@"
            # just search everything under EDITFIlE_DIR
            pushd $EDITFILE_DIR > /dev/null
            find . -type f \( -name \*.otl -name \*.txt -o -name \*.rst -o -name \*.md \) -print0 | xargs -0 grep -Hn --color "$PATTERN"
            popd > /dev/null
            exit 0
            ;;
    esac

    direct_usage
    exit 2
fi

die () {
    echo $1 >&2
    exit 1
}

edit () {
    # Determine editor to use.
    # TODO: make this more generic than it is right now!
    if [[ $TARGET_PATH =~ \.(doc|docx|odt)$ ]] ; then
        # 'word' documents
        # Note that it fails to create a none-existing document,
        # so create one here!
        DOC_TEMPLATE_PATH=${TEMPLATE_DIR}/blank.odt
        [[ -s "$1" ]] || cp "$DOC_TEMPLATE_PATH" "$1" 2>/dev/null || die "No $(basename ${DOC_TEMPLATE_PATH}) in ${DOC_TEMPLATE_PATH}"
        EDIT="${SOFFICE} --writer"
    elif [[ $TARGET_PATH =~ \.(xls|xlsx|ods)$ ]] ; then
        # 'spreadsheet' documents
        # Note that it fails to create a none-existing document,
        # so create one here!
        SS_TEMPLATE_PATH=${TEMPLATE_DIR}/blank.ods
        [[ -s "$1" ]] || cp "$SS_TEMPLATE_PATH" "$1" 2>/dev/null || die "No $(basename ${SS_TEMPLATE_PATH}) in ${SS_TEMPLATE_PATH}"
        EDIT="${SOFFICE} --calc"
    elif [[ $TARGET_PATH =~ \.mm$ ]] ; then
        # support mindmap 'documents' with 'freemind' editor.
        # Note that it fails to create a none-existing document,
        # so create one here!
        [[ -s "$1" ]] || echo '<map version="0.9.0" />' > "$1"
        EDIT="${FREEMIND}"
    elif [[ $TARGET_PATH =~ \.dia$ ]] ; then
        # support 'dia'grams with 'dia'...
        DIA_TEMPLATE_PATH=${TEMPLATE_DIR}/blank.dia
        [[ -s "$1" ]] || cp "$DIA_TEMPLATE_PATH" "$1" 2>/dev/null || die "No blank.dia in ${DIA_TEMPLATE_PATH}"
        EDIT="${DIA} --nonew --nosplash"
    elif [[ $TARGET_PATH =~ \.svg$ ]] ; then
        # support svg with inkscape...
        SVG_TEMPLATE_PATH=${TEMPLATE_DIR}/blank.svg
        [[ -s "$1" ]] || cp "$SVG_TEMPLATE_PATH" "$1" 2>/dev/null || die "No blank.svg in ${SVG_TEMPLATE_PATH}"
        EDIT="${INKSCAPE}"
        PROGRAM_START_DIR="${INKSCAPE_START_DIR}"
    elif [[ $TARGET_PATH =~ \.(txt|md|rst|otl)$ ]] ; then
        EDIT=${EDITFILE_TEXT_EDITOR:-$EDITOR}
    elif [[ $CATEGORY =~ \.[[:alnum:]]+ ]] ; then
        # this is a general 'open the OS-registered program for this document'
        # request. Arguably many of the above could just use this ;-)
        # Note we match against $CATEGORY rather than TARGET_CMD, so we get
        # the original value, not with .txt or whatever appended
        EDIT=$OPEN_CMD
    elif [[ -n "${EDITOR}" ]] ; then
        EDIT=$EDITOR
    elif $(which gedit) ; then
        EDIT="gedit -b"  # default fallback if present
    else
        EDIT="vim"       # fallback if no gedit there
    fi

    # Edit it...
    if [[ -n ${PROGRAM_START_DIR} ]] ; then
        cd ${PROGRAM_START_DIR}
    fi
    echo "$EDIT $1" >> ${LOGFILE}
    # lots of things write to stderr; hide that away in the logfile.
    exec $EDIT "$1" 2>> ${LOGFILE}
}

usage () {
    echo "Usage: $MAJOR_NAME [CATEGORY] [OPTIONS]"
    echo "  default operation is to edit the file"
    echo
    echo "Options:"
    echo "  -h    this help"
    echo "  -a    append stdin to the file"
    echo "  -l    output the file to stdout"
    echo "  -f    output file path name to stdout"
    echo "  -s <pattern>"
    echo "        search for given pattern"
    echo "  -t    time track mode"
    echo "  -c <name>"
    echo "        copy the given item to the new name"
    echo "  -i    import [FILEPATH]"
    echo "  -x    export to [FILEPATH.tar]"
    echo "  -d    delete the file"
    echo " (Note these options are mutually exclusive)"
    echo
    exit 1
}

CATEGORY=""
if [[ -n $1 ]] && ! [[ $1 =~ ^- ]] ; then
    # starts with something other than '-' - assume a category
    CATEGORY=$1
    shift
fi

OPTION_CHARS="alfstcixdh"
MODE='';
while getopts "$OPTION_CHARS" option ; do
    case $option in
        'a')
            if [[ -z $MODE ]] ; then MODE="APPEND"; else usage; fi
            ;;
        'l')
            if [[ -z $MODE ]] ; then MODE="LIST"; else usage; fi
            ;;
        'f')
            if [[ -z $MODE ]] ; then MODE="PATH"; else usage; fi
            ;;
        't')
            if [[ -z $MODE ]] ; then MODE="TRACK"; else usage; fi
            ;;
        's')
            if [[ -z $MODE ]] ; then MODE="SEARCH"; else usage; fi
            ;;
        'c')
            if [[ -z $MODE ]] ; then MODE="COPY"; else usage; fi
            ;;
        'i')
            if [[ -z $MODE ]] ; then MODE="IMPORT"; else usage; fi
            ;;
        'x')
            if [[ -z $MODE ]] ; then MODE="EXPORT"; else usage; fi
            ;;
        'd')
            if [[ -z $MODE ]] ; then MODE="DELETE"; else usage; fi
            ;;
        'h')
            usage
            ;;
        *)
            echo "Invalid option"
            echo
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

# only search/import/export can (and must) have additional arguments
if ! [[ $MODE =~ SEARCH|COPY|IMPORT|EXPORT ]] && [[ -n $1 ]]; then
    echo "Too many arguments: $@"
    echo
    usage
elif [[ $MODE =~ SEARCH|COPY|IMPORT|EXPORT ]]  && [[ -z $1 ]]; then
    echo "Not enough arguments - $MODE option requires an argument"
    echo
    usage
fi

# get path to the file. Also get file path to use for
# history in the TRACK mode.
if [[ -n "$CATEGORY" ]]; then
    # edit a sub-file
    TARGET_DIR="$EDITFILE_DIR/$MAJOR_NAME"
    mkdir -p "$TARGET_DIR"
    TARGET_PATH="$TARGET_DIR/$CATEGORY"
    HIST_FILE="$TARGET_DIR/.hist.$CATEGORY"
    ASSETS_PATH="$TARGET_DIR/$CATEGORY.assets"
else
    # edit the 'main' file
    TARGET_PATH="$EDITFILE_DIR/${MAJOR_NAME}"
    HIST_FILE="$EDITFILE_DIR/.hist.${MAJOR_NAME}"
    ASSETS_PATH="$TARGET_DIR/${MAJOR_NAME}.assets"
fi

# support for various extensions.
# Will always default to .txt if nothing already there.
# Up to the user to change / create ext of different type.
# Hopefully once an editor opens the user can see which
# actual file got selected :-)
# TODO: represent the list of supported file extensions somewhere.
# TODO: - and consolidate the generic extension concept.
if ! [[ $TARGET_PATH =~ \.(rst|txt|md|otl|mm|dia|svg|doc|odt|docx|xls|ods|xlsx|[[:alnum:]]+)$ ]] ; then
    for EXT in .rst .md .otl .txt ; do
        [[ -f "${TARGET_PATH}${EXT}" ]] && break
    done
    TARGET_PATH="${TARGET_PATH}${EXT}"
fi

case $MODE in
    'LIST')
        # list file and exit
        cat "$TARGET_PATH"
        ;;
    'APPEND')
        cat /dev/stdin >> "$TARGET_PATH"
        ;;
    'PATH')
        echo "$TARGET_PATH"
        ;;
    'COPY')
        if ! [[ -f ${TARGET_PATH} ]] ; then
            die "Given target does not exist"
        fi
        if [[ -z "$CATEGORY" ]]; then
            editfile -n "$1" || die "Could not create new top-level editfile cmd"
        fi
        CLONE_PATH="$(dirname ${TARGET_PATH})/$1"
        EXT="${TARGET_PATH##*.}"
        if [[ -n ${EXT} ]] && ! [[ "${CLONE_PATH}" =~ "${EXT}$" ]] ; then
            CLONE_PATH="${CLONE_PATH}.${EXT}"
        fi
        cp -i "${TARGET_PATH}" "${CLONE_PATH}"
        ;;
    'SEARCH')
        grep -n --color "$@" "$TARGET_PATH"
        ;;
    'IMPORT')
        mkdir -p "${ASSETS_PATH}"
        cp "$1" "${ASSETS_PATH}"
        echo "Imported $1 to ${ASSETS_PATH}"
        ;;
    'EXPORT')
        EXT_PATH=""
        if test -d ${ASSETS_PATH} ; then
            EXT_PATH="$(basename ${ASSETS_PATH})"
        fi
        (cd "$(dirname ${TARGET_PATH})"; tar -cf "$1" $(basename "$TARGET_PATH") ${EXT_PATH})
        echo "Exported ${TARGET_PATH} bundle to  $1"
        ;;
    'DELETE')
        [[ -f ${TARGET_PATH} ]] || die "Target for deletion ${TARGET_PATH} not found"
        if [[ -n "${CATEGORY}" ]] ; then
            TRASH_PATH="${TRASH_DIR}/${MAJOR_NAME}"
        else
            TRASH_PATH="${TRASH_DIR}"
        fi

        mkdir -p "${TRASH_PATH}"
        mv "${TARGET_PATH}" ${TRASH_PATH}
        echo "Moved ${TARGET_PATH} to trash: ${TRASH_PATH}"
        ;;
    'TRACK')
        now=$(date '+%Y/%m/%d %H:%M')
        # read history from previous
        history -r $HIST_FILE
        BLANK_LINE="no"
        while read -ep "$now >> " track_input ; do
            STORE_RESULT="no"
            COMMAND=""
            now=$(date '+%Y/%m/%d %H:%M')
            if [[ -n $track_input ]] ; then  # note - no quotes
                BLANK_LINE="no"
            elif [[ ${BLANK_LINE} == "yes" ]] ; then
                continue
            fi
            if [[ -z $track_input || ${BLANK_LINE} == "yes" ]] ; then
                # we record the first of a series of blank lines
                # to allow separation of sections
                BLANK_LINE="yes"
            fi

            if [[ $track_input =~ ^\![^\!] ]] ; then
                # execute and display, don't store command or result
                COMMAND=$(echo $track_input | cut -c2-)
            elif [[ $track_input =~ ^\! ]] ; then
                # execute and display, store command and result
                STORE_RESULT="yes"
                COMMAND=$(echo $track_input | cut -c3-)
            elif [[ $track_input =~ ^\^ ]] ; then
                # replace previous line with content following initial '^'
                #
                # delete last line. note BSD/OS X require a backup extension
                # to be specified (even if blank) unlike gnu sed.
                sed -i"~" '$d' ${TARGET_PATH}
                # remove initial '^'
                track_input=$(echo "$track_input" | cut -c 2-)
            fi
            # use -- to indicate end to options e.g. if track_input
            # starts with '->' which previously caused errors
            history -s -- "$track_input"
            if [[ -n ${COMMAND} ]] ; then
                # Redirect tty back into the command so interactive
                # programs can be used
                RESULT=$(eval "${COMMAND} </dev/tty 2>&1 >/dev/tty")
                echo "${RESULT}"
                if [[ "${STORE_RESULT}" = "no" ]] ; then
                    continue
                fi
            fi
            echo "$now $track_input" >> "${TARGET_PATH}"
            if [[ "$STORE_RESULT" = "yes" ]] && [[ -n "${RESULT}" ]] ; then
                echo "${RESULT}" >> "${TARGET_PATH}"
            fi
        done
        # append current session to history
        history -a "$HIST_FILE"
        # ensure bash prompt starts on a new line
        echo
        ;;
    '')
        # Edit it...
        edit "$TARGET_PATH"
        ;;
esac
